CREATE OR REPLACE FORCE VIEW  "ADMINVIEW" ("ADMIN_ID", "ADMIN_NAME", "USERNAME", "EMAIL", "PHONE") 
AS 
   select ad_id as admin_id, ad_name as admin_name, username, email as email, phone as phone from admin

CREATE OR REPLACE FORCE VIEW  "GETALLDOCTORS" ("DOCTOR_ID", "NAME", "HIRE_DATE", "SALARY", "NATIONALITY", "DATE_OF_BIRTH", "DEPARTMENT_ID") AS 
  select doc_id as doctor_id, doc_name as name, hire_date, salary, nationality, dob as date_of_birth, dept_id as department_id from doctors order by doc_id
  
CREATE OR REPLACE FORCE VIEW  "GETALLPATIENTS" ("PATIENT_ID", "PATIENT_NAME", "GENDER", "AGE", "DIAGNOSIS", "DOCTOR_ID", "WARD", "BILL", "ADMITTED") AS 
  select PAT_ID AS PATIENT_ID, PAT_NAME AS NAME, GENDER, AGE, DIAGNOSIS, DOC_ID AS DOCTOR_ID, ROOM_NO AS WARD, BILL, TO_DATE(ADMITTED, 'DD/MM/YY')AS ADMITTED from PATIENTS
  
  
CREATE OR REPLACE FORCE VIEW  "GETALLPATIENTSREFDOCTORS" ("PATIENT_ID", "PATIENT_NAME", "GENDER", "AGE", "DIAGNOSIS", "DOCTOR_ID", "DOCTOR_NAME", "WARD", "BILL", "ADMITTED", "DEPARTMENT") AS 
  select patients.PAT_ID AS PATIENT_ID, patients.PAT_NAME AS PATIENT_NAME, GENDER, AGE, DIAGNOSIS, PATIENTS.DOC_ID AS DOCTOR_ID, DOCTORS.DOC_NAME as DOCTOR_NAME, patients.ROOM_NO AS WARD, BILL, TO_DATE(patients.ADMITTED, 'DD/MM/YY')AS ADMITTED, department.dept_name as DEPARTMENT from PATIENTS, DOCTORS, department where PATIENTS.DOC_ID = DOCTORS.DOC_ID and doctors.dept_id = department.dept_id order by patients.pat_id

CREATE OR REPLACE FORCE VIEW  "PAT_DOC" ("PAT_ID", "PAT_NAME", "GENDER", "AGE", "DIAGNOSIS", "DOC_ID", "DOC_NAME", "NATIONALITY", "DEPT_ID") AS 
  select patients.pat_id, patients.pat_name, patients.gender, patients.age, patients.diagnosis, doctors.doc_id, doctors.doc_name, doctors.nationality, doctors.dept_id from patients, doctors where patients.doc_id = doctors.doc_id

create or replace procedure Bill(patient_id in patients.pat_id%type) 
is 
days number(8);
patient_invalid EXCEPTION; 
begin 
    days:=calculateDays(patient_id); 
	if 
    update patients set bill = bill+(3000*days) where pat_id = patient_id; 
    dbms_output.put_line('finalized bill'); 
end;

create or replace PROCEDURE DISCHARGEPROCESS(P_ID IN PATIENTS.PAT_ID%TYPE) 
IS 
BEGIN 
     UPDATE PATIENTS SET ROOM_NO = NULL, ADMITTED = NULL WHERE PAT_ID = P_ID; 
	 UPDATE ROOM SET AVAILABILITY = 'YES', OCCUPIED = 'NO', DISCHARGE = NULL, PAT_ID = NULL WHERE pat_id = p_id; 
END;

create or replace PROCEDURE insertDoctor( 
       d_name IN doctors.doc_name%type, 
	   d_hiredate IN doctors.hire_date%type, 
	   d_salary IN doctors.salary%type, 
	   d_nationality IN doctors.nationality%type, 
	   d_dob IN doctors.dob%type, 
	   d_dept_id in doctors.dept_id%type) 
IS 
BEGIN 
    insert into doctors(doc_name, hire_date, salary, nationality, dob, dept_id) values(d_name, d_hiredate, d_salary, d_nationality, d_dob, d_dept_id); 
end;

create or replace PROCEDURE insertPatient( 
       p_name IN patients.pat_name%type, 
	   p_gender IN patients.gender%type, 
	   p_age IN patients.age%type, 
	   p_diagnosis IN patients.diagnosis%type, 
	   p_docId IN patients.doc_id%type, 
	   p_room in patients.room_no%type, 
	   p_bill in patients.bill%type) 
IS 
BEGIN 
       INSERT INTO PATIENTS( pat_name, gender, age, diagnosis, doc_id, room_no, bill, admitted) VALUES (p_name, p_gender, p_age, p_diagnosis, p_docId, p_room, p_bill, to_date(SYSDATE, 'DD-MM-YYYY')); 
END;

create or replace PROCEDURE updatePatient( 
       p_name IN patients.pat_name%type, 
	   p_gender IN patients.gender%type, 
	   p_age IN patients.age%type, 
	   p_diagnosis IN patients.diagnosis%type, 
	   p_docId IN patients.doc_id%type, 
	   p_room in patients.room_no%type, 
	   p_bill in patients.bill%type, 
	   p_admitted in patients.admitted%type, 
	   p_input_id in patients.pat_id%type) 
IS 
-- user defined exception 
   user_invalid_id  EXCEPTION; 
BEGIN 
    if p_input_id <= 0 then
	   raise user_invalid_id;
    else	   
       UPDATE PATIENTS SET pat_name = p_name, gender = p_gender, age = p_age, diagnosis = p_diagnosis, doc_id = p_docId, room_no = p_room, bill = p_bill, admitted = p_admitted where pat_id = p_input_id; 
	end if;
exception 
    when user_invalid_id then 
	   dbms_output.put_line('user has an invalid id!');
	when no_data_found then 
	   dbms_output.put_line('user is not in the system');
	when others then 
	   dbms_output.put_line('error!');
END;

create or replace function calculateDays(patient_id in patients.pat_id%type) 
return varchar2 as patientDays varchar2(40); 
begin 
      select (TO_DATE(SYSDATE, 'dd-mm-yyyy') - to_date((select patients.admitted from patients where patients.pat_id =patient_id), 'dd-mm-yyyy')) into patientDays from dual; 
end;